diff --strip-trailing-cr -Nur gcc-4.8.0.orig/boehm-gc/include/gc.h gcc-4.8.0/boehm-gc/include/gc.h
--- gcc-4.8.0.orig/boehm-gc/include/gc.h	2007-04-24 05:10:09.000000000 +0800
+++ gcc-4.8.0/boehm-gc/include/gc.h	2013-03-23 22:46:03.551318200 +0800
@@ -81,11 +81,11 @@
   typedef unsigned long GC_word;
   typedef long GC_signed_word;
 #else
-  /* Win64 isn't really supported yet, but this is the first step. And	*/
-  /* it might cause error messages to show up in more plausible places.	*/
-  /* This needs basetsd.h, which is included by windows.h.	 	*/
-  typedef ULONG_PTR GC_word;
-  typedef LONG_PTR GC_word;
+  /* Win64 isn't really supported yet, but this is the first step. And  */
+  /* it might cause error messages to show up in more plausible places. */
+  /* This needs basetsd.h, which is included by windows.h.              */
+  typedef uintptr_t GC_word;
+  typedef ptrdiff_t GC_signed_word;
 #endif
 
 /* Public read-only variables */
diff --strip-trailing-cr -Nur gcc-4.8.0.orig/boehm-gc/include/private/gcconfig.h gcc-4.8.0/boehm-gc/include/private/gcconfig.h
--- gcc-4.8.0.orig/boehm-gc/include/private/gcconfig.h	2013-03-06 23:08:58.000000000 +0800
+++ gcc-4.8.0/boehm-gc/include/private/gcconfig.h	2013-03-23 22:46:03.566321000 +0800
@@ -386,8 +386,12 @@
 # else
 #   if (defined(_MSDOS) || defined(_MSC_VER)) && (_M_IX86 >= 300) \
         || defined(_WIN32) && !defined(__CYGWIN32__) && !defined(__CYGWIN__)
-#     define I386
-#     define MSWIN32	/* or Win32s */
+#     if defined(__LP64__) || defined(_WIN64)
+#       define X86_64
+#     else
+#       define I386
+#     endif
+#     define MSWIN32	/* or Win64 */
 #     define mach_type_known
 #   endif
 #   if defined(_MSC_VER) && defined(_M_IA64)
@@ -408,7 +412,7 @@
 #   define CYGWIN32
 #   define mach_type_known
 # endif
-# if defined(__MINGW32__)
+# if defined(__MINGW32__) && !defined(mach_type_known)
 #   define I386
 #   define MSWIN32
 #   define mach_type_known
@@ -1020,8 +1024,7 @@
 # ifdef I386
 #   define MACH_TYPE "I386"
 #   if defined(__LP64__) || defined(_WIN64)
-#     define CPP_WORDSZ 64
-#     define ALIGNMENT 8
+#     error This should be handled as X86_64
 #   else
 #     define CPP_WORDSZ 32
 #     define ALIGNMENT 4
diff --strip-trailing-cr -Nur gcc-4.8.0.orig/boehm-gc/mark.c gcc-4.8.0/boehm-gc/mark.c
--- gcc-4.8.0.orig/boehm-gc/mark.c	2006-01-25 11:03:14.000000000 +0800
+++ gcc-4.8.0/boehm-gc/mark.c	2013-03-23 22:46:03.585340500 +0800
@@ -267,7 +267,7 @@
 /* register values.					*/
 /* We hold the allocation lock.  In the case of 	*/
 /* incremental collection, the world may not be stopped.*/
-#ifdef MSWIN32
+#if defined(MSWIN32) && defined(WRAP_MARK_SOME)
   /* For win32, this is called after we establish a structured	*/
   /* exception handler, in case Windows unmaps one of our root	*/
   /* segments.  See below.  In either case, we acquire the 	*/
@@ -402,7 +402,7 @@
 }
 
 
-#ifdef MSWIN32
+#if defined(MSWIN32) && defined(WRAP_MARK_SOME)
 
 # ifdef __GNUC__
 
@@ -522,7 +522,7 @@
 
       return ret_val;
   }
-#endif /* MSWIN32 */
+#endif /* MSWIN32 && WRAP_MARK_SOME */
 
 
 GC_bool GC_mark_stack_empty()
diff --strip-trailing-cr -Nur gcc-4.8.0.orig/boehm-gc/win32_threads.c gcc-4.8.0/boehm-gc/win32_threads.c
--- gcc-4.8.0.orig/boehm-gc/win32_threads.c	2009-05-18 04:07:18.000000000 +0800
+++ gcc-4.8.0/boehm-gc/win32_threads.c	2013-03-23 22:46:03.597320500 +0800
@@ -368,6 +368,10 @@
 #       if defined(I386)
           PUSH4(Edi,Esi,Ebx,Edx), PUSH2(Ecx,Eax), PUSH1(Ebp);
 	  sp = (ptr_t)context.Esp;
+#	elif defined(X86_64)
+      PUSH4(Rax,Rcx,Rdx,Rbx); PUSH2(Rbp, Rsi); PUSH1(Rdi);
+      PUSH4(R8, R9, R10, R11); PUSH4(R12, R13, R14, R15);
+      sp = (ptr_t)context.Rsp;
 #       elif defined(ARM32)
 	  PUSH4(R0,R1,R2,R3),PUSH4(R4,R5,R6,R7),PUSH4(R8,R9,R10,R11),PUSH1(R12);
 	  sp = (ptr_t)context.Sp;
